allprojects {
	apply plugin: "eclipse"
	apply plugin: "idea"
	
	idea {
		module {
			outputDir file("build/classes/java/main")
			testOutputDir file("build/classes/java/test")
		}
	}
}

configure(subprojects) {
	apply plugin: "java-library"
	apply plugin: "maven-publish"
}

subprojects {
    beforeEvaluate {
    	[compileJava, compileTestJava]*.options*.encoding = "UTF-8"
    	
    	sourceCompatibility = 17
		targetCompatibility = 17
    	
        repositories {
			mavenCentral()
			maven { url "https://jitpack.io" }
		}
		
		configurations {
		    include {
			    canBeResolved = true
			    canBeConsumed = true
		    }
		    
		    shade {
		    	canBeResolved = true
			    canBeConsumed = true
		    }
		    
		    api.extendsFrom(include)
		    implementation.extendsFrom(shade)
		}
    }
    
    afterEvaluate {
        eclipse.project.name = "${projectName}-${subName}"
        
		jar {
			archiveFileName.set("${subName}.jar")
			
			into("META-INF") {
	            from("${rootProject.projectDir}/LICENSE")
	            from("${rootProject.projectDir}/NOTICE")
	        }
	        
	        duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
			dependsOn configurations.shade
			from {
				configurations.shade.collect {
					it.isDirectory() ? it : zipTree(it)
				}
			}
		}
		
        def m2RepoDir = new File(System.getProperty("user.home"), ".m2/repository")
        def groupDir = new File(m2RepoDir, project.group.replace('.', '/'))
        def publishDir = new File(groupDir, "${project.name}/${project.version}")
		
		tasks.register("bundle", Zip) {
		    destinationDirectory.set(publishDir)
		    archiveFileName.set("bundle.zip")
			
		    from(tasks.named("jar"))
		    from(configurations.include) {
		        into("libs")
		    }
		}
		
		tasks.register("setup") {
		    doLast {
	            def file = new File(publishDir, "setup.war")
	            file.text = "v1"
		    }
		}
		
		tasks.named("publishToMavenLocal") {
		    finalizedBy "bundle", "setup"
		}
		
		java {
			withSourcesJar()
			withJavadocJar()
		}
		
		publishing {
			publications {
				maven(MavenPublication) {
					from components.java
				}
			}
		}
    }
}
