plugins {
	id "maven-publish"
}

allprojects {
	apply plugin: "eclipse"
	apply plugin: "idea"
	
	idea {
		module {
			outputDir file("build/classes/java/main")
			testOutputDir file("build/classes/java/test")
		}
	}
}

configure(subprojects) {
	apply plugin: "java-library"
	apply plugin: "maven-publish"
}

subprojects {
    beforeEvaluate {
    	[compileJava, compileTestJava]*.options*.encoding = "UTF-8"
    	
    	sourceCompatibility = 17
		targetCompatibility = 17
    	
        repositories {
			mavenCentral()
			maven { url "https://jitpack.io" }
		}
		
		configurations {
		    include {
			    canBeResolved = true
			    canBeConsumed = true
		    }
		    
		    api.extendsFrom(include)
		}
    }
    
    afterEvaluate {
        eclipse.project.name = "${projectName}-${subName}"
        
		jar {
			archiveFileName.set("${subName}.jar")
			
			into("META-INF") {
	            from("${rootProject.projectDir}/LICENSE")
	            from("${rootProject.projectDir}/NOTICE")
	        }
		}
		
		tasks.register("bundle", Zip) {
		    destinationDirectory.set(file("${buildDir}/libs"))
		    archiveFileName.set("${subName}-bundle.zip")
			
		    from(tasks.named("jar")) {
		        into("libs")
		    }
			
		    from(configurations.include) {
		        into("libs")
		    }
		}
		
		tasks.named("jar") {
		    finalizedBy("bundle")
		}
		
		java {
			withSourcesJar()
			withJavadocJar()
		}
		
		publishing {
			publications {
				maven(MavenPublication) {
					groupId project.group
					artifactId project.name
					version project.version
					
					from components.java
					
					artifact(tasks.named("bundle")) {
		                classifier = "bundle"
		            }
				}
			}
		}
    }
}

tasks.register("versionManager") {
    def file = file("${buildDir}/libs/version-manager.txt")
    outputs.file(file)
    doLast {
        file.parentFile.mkdirs()
        file.text = "v1"
    }
}

tasks.named("publish") {
    dependsOn "versionManager"
}

publishing {
	publications {
		maven(MavenPublication) {
            artifact(tasks.named("versionManager")) {
                classifier = "version-manager"
            }
		}
	}
}
